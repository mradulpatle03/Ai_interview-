// seed.js
// At the very top of seed.js
require("dotenv").config({ path: __dirname + "/../../.env" }); // adjust path as needed
console.log("MONGO_URI =", process.env.MONGO_URI); // check if it's loaded

const mongoose = require("mongoose");
const Question = require("../models/QuestionBank");

const questions = [
  // =========================
  // DSA - EASY (10)
  // =========================
  {
    text: "What is the time complexity of linear search?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "O(1)", isCorrect: false },
      { text: "O(n)", isCorrect: true },
      { text: "O(log n)", isCorrect: false },
      { text: "O(n^2)", isCorrect: false },
    ],
    tags: ["arrays", "searching"],
  },
  {
    text: "Which data structure uses FIFO principle?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Stack", isCorrect: false },
      { text: "Queue", isCorrect: true },
      { text: "Tree", isCorrect: false },
      { text: "Graph", isCorrect: false },
    ],
    tags: ["queue", "basics"],
  },
  {
    text: "Which sorting algorithm is the fastest in the average case?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Bubble Sort", isCorrect: false },
      { text: "Quick Sort", isCorrect: true },
      { text: "Selection Sort", isCorrect: false },
      { text: "Insertion Sort", isCorrect: false },
    ],
    tags: ["sorting"],
  },
  {
    text: "Which data structure is used to implement recursion?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Stack", isCorrect: true },
      { text: "Queue", isCorrect: false },
      { text: "Heap", isCorrect: false },
      { text: "Graph", isCorrect: false },
    ],
    tags: ["recursion", "stack"],
  },
  {
    text: "Which operation is used to insert an element at the end of an array?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Push", isCorrect: true },
      { text: "Pop", isCorrect: false },
      { text: "Peek", isCorrect: false },
      { text: "Shift", isCorrect: false },
    ],
    tags: ["arrays"],
  },
  {
    text: "Which searching algorithm requires sorted input?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Binary Search", isCorrect: true },
      { text: "Linear Search", isCorrect: false },
      { text: "Hashing", isCorrect: false },
      { text: "DFS", isCorrect: false },
    ],
    tags: ["searching"],
  },
  {
    text: "Which data structure is used for BFS traversal of graphs?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Stack", isCorrect: false },
      { text: "Queue", isCorrect: true },
      { text: "Heap", isCorrect: false },
      { text: "Tree", isCorrect: false },
    ],
    tags: ["graphs", "BFS"],
  },
  {
    text: "Which sorting algorithm works best when the input is nearly sorted?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Insertion Sort", isCorrect: true },
      { text: "Bubble Sort", isCorrect: false },
      { text: "Quick Sort", isCorrect: false },
      { text: "Heap Sort", isCorrect: false },
    ],
    tags: ["sorting"],
  },
  {
    text: "What is the maximum number of children a binary tree node can have?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "1", isCorrect: false },
      { text: "2", isCorrect: true },
      { text: "3", isCorrect: false },
      { text: "4", isCorrect: false },
    ],
    tags: ["trees"],
  },
  {
    text: "Which data structure is used in Dijkstra’s algorithm?",
    category: "DSA",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Priority Queue", isCorrect: true },
      { text: "Stack", isCorrect: false },
      { text: "Queue", isCorrect: false },
      { text: "Linked List", isCorrect: false },
    ],
    tags: ["graphs", "shortest-path"],
  },

  // =========================
  // DSA - MEDIUM (10)
  // =========================
  {
    text: "Which data structure is best suited for implementing LRU cache?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Stack + Array", isCorrect: false },
      { text: "HashMap + Doubly Linked List", isCorrect: true },
      { text: "Heap", isCorrect: false },
      { text: "Queue", isCorrect: false },
    ],
    tags: ["cache", "linkedlist", "hashmap"],
  },
  {
    text: "What is the worst-case time complexity of Quick Sort?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "O(n log n)", isCorrect: false },
      { text: "O(n^2)", isCorrect: true },
      { text: "O(log n)", isCorrect: false },
      { text: "O(n)", isCorrect: false },
    ],
    tags: ["sorting"],
  },
  {
    text: "Which algorithm is used to detect cycles in a directed graph?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "DFS with recursion stack", isCorrect: true },
      { text: "BFS", isCorrect: false },
      { text: "Dijkstra’s algorithm", isCorrect: false },
      { text: "Prim’s algorithm", isCorrect: false },
    ],
    tags: ["graphs", "cycles"],
  },
  {
    text: "Which traversal of a BST gives sorted output?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Preorder", isCorrect: false },
      { text: "Inorder", isCorrect: true },
      { text: "Postorder", isCorrect: false },
      { text: "Level Order", isCorrect: false },
    ],
    tags: ["trees", "BST"],
  },
  {
    text: "Which algorithm is used in finding Minimum Spanning Tree?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Dijkstra’s Algorithm", isCorrect: false },
      { text: "Prim’s Algorithm", isCorrect: true },
      { text: "Kruskal’s Algorithm", isCorrect: true },
      { text: "Floyd-Warshall Algorithm", isCorrect: false },
    ],
    tags: ["MST", "graphs"],
  },
  {
    text: "Which data structure is used in implementing a priority queue?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Array", isCorrect: false },
      { text: "Linked List", isCorrect: false },
      { text: "Heap", isCorrect: true },
      { text: "Stack", isCorrect: false },
    ],
    tags: ["heap", "priority-queue"],
  },
  {
    text: "What is the average-case time complexity of Merge Sort?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "O(n)", isCorrect: false },
      { text: "O(n log n)", isCorrect: true },
      { text: "O(log n)", isCorrect: false },
      { text: "O(n^2)", isCorrect: false },
    ],
    tags: ["sorting"],
  },
  {
    text: "Which algorithm is used to solve the shortest path in weighted graphs with negative edges?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Dijkstra’s Algorithm", isCorrect: false },
      { text: "Bellman-Ford Algorithm", isCorrect: true },
      { text: "Floyd-Warshall Algorithm", isCorrect: false },
      { text: "Prim’s Algorithm", isCorrect: false },
    ],
    tags: ["shortest-path", "graphs"],
  },
  {
    text: "Which data structure is used in a DFS implementation?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Queue", isCorrect: false },
      { text: "Stack", isCorrect: true },
      { text: "Heap", isCorrect: false },
      { text: "Array", isCorrect: false },
    ],
    tags: ["graphs", "DFS"],
  },
  {
    text: "What is the space complexity of recursive Fibonacci (without memoization)?",
    category: "DSA",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "O(1)", isCorrect: false },
      { text: "O(n)", isCorrect: true },
      { text: "O(log n)", isCorrect: false },
      { text: "O(n^2)", isCorrect: false },
    ],
    tags: ["recursion", "fibonacci"],
  },

  // =========================
  // DSA - HARD (10)
  // =========================
  {
    text: "What is the time complexity of matrix chain multiplication using DP?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "O(n^2)", isCorrect: false },
      { text: "O(n^3)", isCorrect: true },
      { text: "O(2^n)", isCorrect: false },
      { text: "O(n log n)", isCorrect: false },
    ],
    tags: ["DP", "matrix-chain"],
  },
  {
    text: "Which algorithm is used to find strongly connected components (SCC) in a graph?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Tarjan’s Algorithm", isCorrect: true },
      { text: "Kruskal’s Algorithm", isCorrect: false },
      { text: "Prim’s Algorithm", isCorrect: false },
      { text: "Floyd-Warshall Algorithm", isCorrect: false },
    ],
    tags: ["graphs", "SCC"],
  },
  {
    text: "What is the time complexity of the KMP string matching algorithm?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "O(n + m)", isCorrect: true },
      { text: "O(n*m)", isCorrect: false },
      { text: "O(n log m)", isCorrect: false },
      { text: "O(log n)", isCorrect: false },
    ],
    tags: ["strings", "pattern-matching"],
  },
  {
    text: "Which data structure is used in the implementation of Dijkstra’s algorithm for efficiency?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Fibonacci Heap", isCorrect: true },
      { text: "Array", isCorrect: false },
      { text: "Stack", isCorrect: false },
      { text: "Splay Tree", isCorrect: false },
    ],
    tags: ["graphs", "shortest-path"],
  },
  {
    text: "What is the worst-case time complexity of Heap Sort?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "O(n log n)", isCorrect: true },
      { text: "O(n^2)", isCorrect: false },
      { text: "O(log n)", isCorrect: false },
      { text: "O(n)", isCorrect: false },
    ],
    tags: ["sorting"],
  },
  {
    text: "Which algorithm is used for finding maximum flow in a network?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Ford-Fulkerson Algorithm", isCorrect: true },
      { text: "Dijkstra’s Algorithm", isCorrect: false },
      { text: "Prim’s Algorithm", isCorrect: false },
      { text: "Bellman-Ford Algorithm", isCorrect: false },
    ],
    tags: ["graphs", "max-flow"],
  },
  {
    text: "What is the time complexity of building a heap from an array of n elements?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "O(n log n)", isCorrect: false },
      { text: "O(n)", isCorrect: true },
      { text: "O(n^2)", isCorrect: false },
      { text: "O(log n)", isCorrect: false },
    ],
    tags: ["heap"],
  },
  {
    text: "Which algorithm solves the All-Pairs Shortest Path problem?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Floyd-Warshall Algorithm", isCorrect: true },
      { text: "Kruskal’s Algorithm", isCorrect: false },
      { text: "Prim’s Algorithm", isCorrect: false },
      { text: "DFS", isCorrect: false },
    ],
    tags: ["graphs", "shortest-path"],
  },
  {
    text: "Which data structure is used in implementing Huffman Coding?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Binary Heap", isCorrect: true },
      { text: "Stack", isCorrect: false },
      { text: "Queue", isCorrect: false },
      { text: "HashMap", isCorrect: false },
    ],
    tags: ["greedy", "compression"],
  },
  {
    text: "What is the amortized time complexity of union-find (disjoint set) with path compression?",
    category: "DSA",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "O(log n)", isCorrect: false },
      { text: "O(α(n))", isCorrect: true }, // inverse Ackermann
      { text: "O(n)", isCorrect: false },
      { text: "O(1)", isCorrect: false },
    ],
    tags: ["union-find", "disjoint-set"],
  },

  // System Design MCQs

  // Easy

  {
    text: "Which of the following best describes a Load Balancer?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "A tool for writing SQL queries", isCorrect: false },
      {
        text: "A component that distributes incoming traffic across servers",
        isCorrect: true,
      },
      { text: "A cache for storing frequently used data", isCorrect: false },
      { text: "A compiler for backend services", isCorrect: false },
    ],
    tags: ["load balancing", "architecture"],
  },
  {
    text: "What is the primary purpose of a CDN (Content Delivery Network)?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "To store user credentials", isCorrect: false },
      { text: "To minimize database load", isCorrect: false },
      {
        text: "To deliver content faster by caching closer to users",
        isCorrect: true,
      },
      { text: "To replace relational databases", isCorrect: false },
    ],
    tags: ["cdn", "performance"],
  },
  {
    text: "Which database is best suited for storing relationships, like social network friends?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Key-Value Store", isCorrect: false },
      { text: "Graph Database", isCorrect: true },
      { text: "Document Database", isCorrect: false },
      { text: "Columnar Database", isCorrect: false },
    ],
    tags: ["databases", "graph"],
  },
  {
    text: "Which component temporarily stores data in memory for quick retrieval?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Cache", isCorrect: true },
      { text: "Load Balancer", isCorrect: false },
      { text: "API Gateway", isCorrect: false },
      { text: "Firewall", isCorrect: false },
    ],
    tags: ["cache", "performance"],
  },
  {
    text: "Which architecture is commonly used for scaling read-heavy applications?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Read Replicas", isCorrect: true },
      { text: "Sharding", isCorrect: false },
      { text: "Write-Ahead Logging", isCorrect: false },
      { text: "Message Queues", isCorrect: false },
    ],
    tags: ["databases", "scalability"],
  },
  {
    text: "In microservices, what is an API Gateway responsible for?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Compiling source code", isCorrect: false },
      { text: "Routing requests to the correct microservice", isCorrect: true },
      { text: "Storing user passwords", isCorrect: false },
      { text: "Managing database indexes", isCorrect: false },
    ],
    tags: ["api gateway", "microservices"],
  },
  {
    text: "Which of these is NOT a NoSQL database?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "MongoDB", isCorrect: false },
      { text: "Cassandra", isCorrect: false },
      { text: "MySQL", isCorrect: true },
      { text: "Redis", isCorrect: false },
    ],
    tags: ["databases", "nosql"],
  },
  {
    text: "Which component decouples services by storing tasks for later processing?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Cache", isCorrect: false },
      { text: "Message Queue", isCorrect: true },
      { text: "Firewall", isCorrect: false },
      { text: "Load Balancer", isCorrect: false },
    ],
    tags: ["queues", "asynchronous"],
  },
  {
    text: "What does horizontal scaling mean?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Adding more powerful hardware to one server", isCorrect: false },
      { text: "Adding more servers to handle load", isCorrect: true },
      { text: "Decreasing the number of servers", isCorrect: false },
      { text: "Optimizing SQL queries", isCorrect: false },
    ],
    tags: ["scaling", "architecture"],
  },
  {
    text: "Which of the following best describes CAP theorem?",
    category: "SystemDesign",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "A principle about CPU scheduling", isCorrect: false },
      {
        text: "It states that a distributed system can provide only two of Consistency, Availability, and Partition Tolerance",
        isCorrect: true,
      },
      { text: "It defines cache eviction policies", isCorrect: false },
      { text: "A theorem about data encryption", isCorrect: false },
    ],
    tags: ["cap theorem", "distributed systems"],
  },

  // ================= MEDIUM SYSTEM DESIGN =================
  {
    text: "Which of the following is a good approach for scaling a write-heavy relational database?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Read Replicas", isCorrect: false },
      { text: "Sharding", isCorrect: true },
      { text: "CDN Caching", isCorrect: false },
      { text: "Load Balancer", isCorrect: false },
    ],
    tags: ["databases", "sharding"],
  },
  {
    text: "What is the role of a Reverse Proxy?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Encrypting user passwords", isCorrect: false },
      { text: "Handling outbound requests", isCorrect: false },
      { text: "Routing client requests to backend servers", isCorrect: true },
      { text: "Replacing firewalls", isCorrect: false },
    ],
    tags: ["reverse proxy", "architecture"],
  },
  {
    text: "Which data storage strategy is used when data is partitioned across multiple databases?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Replication", isCorrect: false },
      { text: "Sharding", isCorrect: true },
      { text: "Mirroring", isCorrect: false },
      { text: "Clustering", isCorrect: false },
    ],
    tags: ["databases", "scalability"],
  },
  {
    text: "Which of these is a key advantage of event-driven architecture?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Synchronous communication", isCorrect: false },
      { text: "Tight coupling of services", isCorrect: false },
      { text: "Improved scalability and decoupling", isCorrect: true },
      { text: "Elimination of message queues", isCorrect: false },
    ],
    tags: ["event-driven", "architecture"],
  },
  {
    text: "In system design, what is eventual consistency?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Data is always consistent across nodes", isCorrect: false },
      {
        text: "Data may be temporarily inconsistent but will become consistent over time",
        isCorrect: true,
      },
      { text: "System never becomes consistent", isCorrect: false },
      { text: "Only cache is consistent", isCorrect: false },
    ],
    tags: ["databases", "consistency"],
  },
  {
    text: "Which of these best reduces the load on a primary database in read-heavy systems?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Adding more indexes", isCorrect: false },
      { text: "Read Replicas", isCorrect: true },
      { text: "CAP theorem", isCorrect: false },
      { text: "Firewall rules", isCorrect: false },
    ],
    tags: ["databases", "scaling"],
  },
  {
    text: "Why are microservices harder to monitor than monoliths?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "They require more SQL queries", isCorrect: false },
      {
        text: "Logs and metrics are distributed across many services",
        isCorrect: true,
      },
      { text: "They can’t be scaled", isCorrect: false },
      { text: "They require only one programming language", isCorrect: false },
    ],
    tags: ["monitoring", "microservices"],
  },
  {
    text: "Which caching strategy ensures consistency between cache and database by writing to both simultaneously?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Cache-Aside", isCorrect: false },
      { text: "Write-Through", isCorrect: true },
      { text: "Write-Behind", isCorrect: false },
      { text: "Read-Through", isCorrect: false },
    ],
    tags: ["cache", "consistency"],
  },
  {
    text: "Which is a disadvantage of sharding?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Increased query complexity", isCorrect: true },
      { text: "Faster reads", isCorrect: false },
      { text: "Higher availability", isCorrect: false },
      { text: "Lower latency", isCorrect: false },
    ],
    tags: ["databases", "sharding"],
  },
  {
    text: "Which technique is used to handle sudden spikes in traffic efficiently?",
    category: "SystemDesign",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Rate Limiting", isCorrect: true },
      { text: "Indexing", isCorrect: false },
      { text: "Normalization", isCorrect: false },
      { text: "Joins", isCorrect: false },
    ],
    tags: ["traffic", "scaling"],
  },

  // ================= HARD SYSTEM DESIGN =================
  {
    text: "In designing a distributed cache, which consistency model is often chosen for performance?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Strong Consistency", isCorrect: false },
      { text: "Eventual Consistency", isCorrect: true },
      { text: "Serializability", isCorrect: false },
      { text: "Immediate Consistency", isCorrect: false },
    ],
    tags: ["cache", "consistency"],
  },
  {
    text: "Which algorithm is commonly used in load balancers for distributing traffic?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Dijkstra’s Algorithm", isCorrect: false },
      { text: "Round Robin", isCorrect: true },
      { text: "Prim’s Algorithm", isCorrect: false },
      { text: "RSA Algorithm", isCorrect: false },
    ],
    tags: ["load balancing", "algorithms"],
  },
  {
    text: "What’s a common strategy for ensuring high availability in a database cluster?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Single Master Node", isCorrect: false },
      { text: "Replication with Failover", isCorrect: true },
      { text: "No Backups", isCorrect: false },
      { text: "Sharding only", isCorrect: false },
    ],
    tags: ["databases", "availability"],
  },
  {
    text: "Which approach is best for ensuring idempotency in APIs?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Stateless design with unique request IDs", isCorrect: true },
      { text: "Storing state in client", isCorrect: false },
      { text: "Using random responses", isCorrect: false },
      { text: "Dropping duplicate requests", isCorrect: false },
    ],
    tags: ["apis", "idempotency"],
  },
  {
    text: "When designing a system like Twitter feed, what is a common approach for scaling reads?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Push model with fan-out on write", isCorrect: true },
      { text: "Pull model with fan-out on read", isCorrect: false },
      { text: "Only caching user timelines", isCorrect: false },
      { text: "Single database table for all tweets", isCorrect: false },
    ],
    tags: ["system design", "twitter", "feeds"],
  },
  {
    text: "Which partitioning strategy ensures uniform data distribution?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Range Partitioning", isCorrect: false },
      { text: "Hash Partitioning", isCorrect: true },
      { text: "List Partitioning", isCorrect: false },
      { text: "Manual Partitioning", isCorrect: false },
    ],
    tags: ["databases", "partitioning"],
  },
  {
    text: "Why is consensus (e.g., Paxos, Raft) important in distributed systems?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "For compressing data", isCorrect: false },
      {
        text: "For agreeing on a single source of truth across nodes",
        isCorrect: true,
      },
      { text: "For load balancing", isCorrect: false },
      { text: "For writing SQL queries", isCorrect: false },
    ],
    tags: ["consensus", "distributed systems"],
  },
  {
    text: "Which of these is a drawback of microservices?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Scalability", isCorrect: false },
      { text: "Independent deployment", isCorrect: false },
      { text: "Increased operational complexity", isCorrect: true },
      { text: "Technology diversity", isCorrect: false },
    ],
    tags: ["microservices", "tradeoffs"],
  },
  {
    text: "Which type of database is optimized for analytical queries over huge datasets?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "OLTP", isCorrect: false },
      { text: "OLAP / Columnar", isCorrect: true },
      { text: "Key-Value", isCorrect: false },
      { text: "Graph", isCorrect: false },
    ],
    tags: ["databases", "analytics"],
  },
  {
    text: "What’s the main advantage of using CQRS (Command Query Responsibility Segregation)?",
    category: "SystemDesign",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Merges read and write paths", isCorrect: false },
      {
        text: "Separates read and write paths for scalability",
        isCorrect: true,
      },
      { text: "Only useful for caching", isCorrect: false },
      { text: "Reduces network traffic only", isCorrect: false },
    ],
    tags: ["cqrs", "architecture"],
  },

  // CS Fundamentals MCQs

  // Easy

  {
    text: "Which data structure uses FIFO (First In First Out)?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Stack", isCorrect: false },
      { text: "Queue", isCorrect: true },
      { text: "Tree", isCorrect: false },
      { text: "Graph", isCorrect: false },
    ],
    tags: ["data structures", "queue"],
  },
  {
    text: "Which logic gate outputs 1 only if both inputs are 1?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "AND", isCorrect: true },
      { text: "OR", isCorrect: false },
      { text: "XOR", isCorrect: false },
      { text: "NOT", isCorrect: false },
    ],
    tags: ["logic gates"],
  },
  {
    text: "Which of the following is an example of an operating system?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Google Chrome", isCorrect: false },
      { text: "Linux", isCorrect: true },
      { text: "MS Word", isCorrect: false },
      { text: "Oracle", isCorrect: false },
    ],
    tags: ["operating systems"],
  },
  {
    text: "Which notation represents time complexity growth?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Sigma", isCorrect: false },
      { text: "Big-O", isCorrect: true },
      { text: "Delta", isCorrect: false },
      { text: "Pi", isCorrect: false },
    ],
    tags: ["complexity"],
  },
  {
    text: "Which of these is volatile memory?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "ROM", isCorrect: false },
      { text: "RAM", isCorrect: true },
      { text: "Hard Disk", isCorrect: false },
      { text: "SSD", isCorrect: false },
    ],
    tags: ["memory"],
  },
  {
    text: "What is the binary representation of decimal number 5?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "101", isCorrect: true },
      { text: "110", isCorrect: false },
      { text: "111", isCorrect: false },
      { text: "100", isCorrect: false },
    ],
    tags: ["binary", "number systems"],
  },
  {
    text: "Which layer of the OSI model handles IP addressing?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Application Layer", isCorrect: false },
      { text: "Transport Layer", isCorrect: false },
      { text: "Network Layer", isCorrect: true },
      { text: "Physical Layer", isCorrect: false },
    ],
    tags: ["networking", "osi"],
  },
  {
    text: "Which scheduling algorithm executes processes in the order they arrive?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Round Robin", isCorrect: false },
      { text: "First Come First Serve", isCorrect: true },
      { text: "Priority Scheduling", isCorrect: false },
      { text: "Shortest Job Next", isCorrect: false },
    ],
    tags: ["os", "scheduling"],
  },
  {
    text: "Which part of the CPU carries out arithmetic operations?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Control Unit", isCorrect: false },
      { text: "Registers", isCorrect: false },
      { text: "ALU", isCorrect: true },
      { text: "Cache", isCorrect: false },
    ],
    tags: ["cpu", "architecture"],
  },
  {
    text: "Which type of key uniquely identifies a record in a relational database?",
    category: "CSFundamentals",
    difficulty: "easy",
    type: "technical",
    options: [
      { text: "Foreign Key", isCorrect: false },
      { text: "Composite Key", isCorrect: false },
      { text: "Primary Key", isCorrect: true },
      { text: "Secondary Key", isCorrect: false },
    ],
    tags: ["databases", "keys"],
  },
  // ================= MEDIUM =================
  {
    text: "Which of these algorithms is NOT a sorting algorithm?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "QuickSort", isCorrect: false },
      { text: "MergeSort", isCorrect: false },
      { text: "Dijkstra", isCorrect: true },
      { text: "HeapSort", isCorrect: false },
    ],
    tags: ["algorithms", "sorting"],
  },
  {
    text: "Which page replacement algorithm suffers from Belady’s anomaly?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "LRU", isCorrect: false },
      { text: "FIFO", isCorrect: true },
      { text: "Optimal", isCorrect: false },
      { text: "Clock", isCorrect: false },
    ],
    tags: ["os", "paging"],
  },
  {
    text: "In relational databases, what does normalization achieve?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Denormalization", isCorrect: false },
      { text: "Redundancy reduction", isCorrect: true },
      { text: "Data encryption", isCorrect: false },
      { text: "Query optimization", isCorrect: false },
    ],
    tags: ["databases", "normalization"],
  },
  {
    text: "Which of these is a non-volatile memory type?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "SRAM", isCorrect: false },
      { text: "DRAM", isCorrect: false },
      { text: "ROM", isCorrect: true },
      { text: "Cache", isCorrect: false },
    ],
    tags: ["memory"],
  },
  {
    text: "Which scheduling algorithm gives each process a fixed time slot in cyclic order?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Round Robin", isCorrect: true },
      { text: "FCFS", isCorrect: false },
      { text: "SJF", isCorrect: false },
      { text: "Priority", isCorrect: false },
    ],
    tags: ["os", "scheduling"],
  },
  {
    text: "What is the time complexity of searching in a balanced binary search tree?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "O(1)", isCorrect: false },
      { text: "O(n)", isCorrect: false },
      { text: "O(log n)", isCorrect: true },
      { text: "O(n log n)", isCorrect: false },
    ],
    tags: ["bst", "complexity"],
  },
  {
    text: "In networking, which protocol is connection-oriented?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "UDP", isCorrect: false },
      { text: "TCP", isCorrect: true },
      { text: "ICMP", isCorrect: false },
      { text: "ARP", isCorrect: false },
    ],
    tags: ["networking", "protocols"],
  },
  {
    text: "Which of the following is an NP-complete problem?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Binary Search", isCorrect: false },
      { text: "Traveling Salesman Problem", isCorrect: true },
      { text: "Merge Sort", isCorrect: false },
      { text: "Matrix Multiplication", isCorrect: false },
    ],
    tags: ["complexity", "np-complete"],
  },
  {
    text: "Which of these is NOT a property of transactions in DBMS?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Atomicity", isCorrect: false },
      { text: "Consistency", isCorrect: false },
      { text: "Isolation", isCorrect: false },
      { text: "Redundancy", isCorrect: true },
    ],
    tags: ["databases", "transactions"],
  },
  {
    text: "Which of the following is true about compiler vs interpreter?",
    category: "CSFundamentals",
    difficulty: "medium",
    type: "technical",
    options: [
      { text: "Compiler executes code line by line", isCorrect: false },
      { text: "Interpreter translates entire code at once", isCorrect: false },
      { text: "Compiler translates entire code at once", isCorrect: true },
      { text: "Interpreter produces a binary executable", isCorrect: false },
    ],
    tags: ["compilers"],
  },
  {
    text: "Which scheduling algorithm can cause starvation due to high priority processes?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Round Robin", isCorrect: false },
      { text: "Priority Scheduling", isCorrect: true },
      { text: "FCFS", isCorrect: false },
      { text: "SJF", isCorrect: false },
    ],
    tags: ["os", "scheduling"],
  },
  {
    text: "What is the average case time complexity of QuickSort?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "O(n)", isCorrect: false },
      { text: "O(n log n)", isCorrect: true },
      { text: "O(n^2)", isCorrect: false },
      { text: "O(log n)", isCorrect: false },
    ],
    tags: ["algorithms", "sorting"],
  },
  {
    text: "Which of the following is NOT a feature of RISC architecture?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Simple instructions", isCorrect: false },
      { text: "Fixed instruction length", isCorrect: false },
      { text: "Microprogramming for complex instructions", isCorrect: true },
      { text: "Load/store architecture", isCorrect: false },
    ],
    tags: ["computer architecture", "risc"],
  },
  {
    text: "Which data structure is used in the implementation of recursion?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Queue", isCorrect: false },
      { text: "Stack", isCorrect: true },
      { text: "Heap", isCorrect: false },
      { text: "Graph", isCorrect: false },
    ],
    tags: ["recursion", "stack"],
  },
  {
    text: "In DBMS, which isolation level prevents dirty reads but allows non-repeatable reads?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Read Uncommitted", isCorrect: false },
      { text: "Read Committed", isCorrect: true },
      { text: "Repeatable Read", isCorrect: false },
      { text: "Serializable", isCorrect: false },
    ],
    tags: ["databases", "transactions"],
  },
  {
    text: "Which consistency model guarantees that reads always return the most recent write?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Strong Consistency", isCorrect: true },
      { text: "Eventual Consistency", isCorrect: false },
      { text: "Causal Consistency", isCorrect: false },
      { text: "Weak Consistency", isCorrect: false },
    ],
    tags: ["databases", "consistency"],
  },
  {
    text: "Which scheduling algorithm minimizes average waiting time but can lead to starvation?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Shortest Job First", isCorrect: true },
      { text: "Round Robin", isCorrect: false },
      { text: "Priority Scheduling", isCorrect: false },
      { text: "FCFS", isCorrect: false },
    ],
    tags: ["os", "scheduling"],
  },
  {
    text: "Which algorithm is used in public-key cryptography?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "RSA", isCorrect: true },
      { text: "AES", isCorrect: false },
      { text: "MD5", isCorrect: false },
      { text: "SHA-256", isCorrect: false },
    ],
    tags: ["cryptography", "security"],
  },
  {
    text: "Which of these problems is undecidable?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Finding GCD", isCorrect: false },
      { text: "Sorting an array", isCorrect: false },
      { text: "Halting Problem", isCorrect: true },
      { text: "Graph Traversal", isCorrect: false },
    ],
    tags: ["theory of computation", "undecidability"],
  },
  {
    text: "Which cache mapping technique uses both direct mapping and associative mapping?",
    category: "CSFundamentals",
    difficulty: "hard",
    type: "technical",
    options: [
      { text: "Direct Mapping", isCorrect: false },
      { text: "Fully Associative Mapping", isCorrect: false },
      { text: "Set-Associative Mapping", isCorrect: true },
      { text: "Hash Mapping", isCorrect: false },
    ],
    tags: ["memory", "cache"],
  },
];

async function seedDB() {
  try {
    if (!process.env.MONGO_URI) {
      console.error("MONGO_URI is not defined");
      return;
    }
    await mongoose.connect(process.env.MONGO_URI);
    await Question.deleteMany({});
    console.log("Existing questions removed");

    await Question.insertMany(questions);
    console.log("Questions seeded successfully");
  } catch (err) {
    console.error("Error seeding database:", err);
  } finally {
    mongoose.connection.close();
  }
}

seedDB();
